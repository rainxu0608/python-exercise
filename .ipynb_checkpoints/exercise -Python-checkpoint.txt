### Question 1
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Create DataFrame df
np.random.seed(42)  # for reproducible results

data = {
    "A": np.random.random(6),
    "B": np.random.choice(["test", "train"], 6),
    "C": np.random.randint(0, 10, 6),
    "D": pd.Series(np.random.randint(0, 10, 6)),
    "E": pd.date_range("2021-01-01", periods=6, freq="MS"),
}

df = pd.DataFrame(data)
print(df)

# Convert numeric columns into numpy.matrix and compute the row sums
numeric_columns = df.select_dtypes(include=[np.number]).values
matrix = np.matrix(numeric_columns)
row_sums = matrix.sum(axis=0)
print(row_sums)

# Sort by column C
df_sorted = df.sort_values(by="C")
print(df_sorted)

# Filter for entries where B has value "train" and C has values greater than 0
df_filtered = df[(df["B"] == "train") & (df["C"] > 0)]
print(df_filtered)

# Change the value in the 4th column and 2nd row to 10
df.iat[1, 3] = 10
print(df)

# Create a column F where half the values are NaN
df["F"] = np.where(np.random.random(6) > 0.5, np.nan, np.random.random(6))
print(df)

# Deal with missing values in two different ways
# Remove entries with missing data
df_no_missing = df.dropna()
print(df_no_missing)

# 
df_filled = df.fillna(0)
print(df_filled)

# Convert column A into a cumulative sum
df["A"] = df["A"].cumsum()
print(df)

# Subtract column B from column A
df["diff_AB"] = df["A"] - df["B"].astype('category').cat.codes
print(df)

# Plot the numeric columns as a line plot, ensuring that the plot has proper labels
numeric_df = df.select_dtypes(include=[np.number])
numeric_df.plot()
plt.xlabel("Index")
plt.ylabel("Value")
plt.title("Line Plot of Numeric Columns")
plt.legend(numeric_df.columns)
plt.show()

# Compute the mean values of each column for groups 'train' and 'test'
mean_values = df.groupby("B").mean(numeric_only=True)
print(mean_values)

# Convert the following from a to b (long to wide)
a = pd.DataFrame(
    {"value": [1, 2, 3, 4, 5, 6], "group": ["a", "a", "a", "b", "b", "b"]}
)

b = a.pivot_table(index=a.index % 3, columns="group", values="value")
b.columns.name = None
b.reset_index(drop=True, inplace=True)
print('long to wide:', '\n', b)

# Convert the following from b to a (wide to long)
b = pd.DataFrame(
    {"a": [1, 2, 3], "b": [4, 5, 6]}
)

a = b.melt(value_name="value", var_name="group").sort_values(by="group")
a.reset_index(drop=True, inplace=True)
print('wide to long:', '\n', a)


### Question 2
import sklearn as sk 
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

# Load the Iris dataset
iris = sk.datasets.load_iris()

# Visualize the data matrix
iris_df = pd.DataFrame(iris.data, columns=iris.feature_names)
iris_df["species"] = iris.target
sns.pairplot(iris_df, hue="species", diag_kind="kde")
plt.show()

# Train a random forest classifier to predict the target values
X = iris.data
y = iris.target
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

rf_classifier = RandomForestClassifier(random_state=42)
rf_classifier.fit(X_train, y_train)
y_pred = rf_classifier.predict(X_test)

# Report the performance using an appropriate evaluation metric
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
print("Classification Report:")
print(classification_report(y_test, y_pred))

from Bio import Entrez
import csv
import sqlite3

# Set your email here
Entrez.email = "rain0608@connect.hku.hk"

# Search for medline abstracts on "medulloblastoma" published in 2012
handle = Entrez.esearch(db="pubmed", term="medulloblastoma", retmax=100000, datetype="pdat", mindate=2012, maxdate=2012)
record = Entrez.read(handle)
idlist = record["IdList"]

# Fetch the details of the publications
handle = Entrez.efetch(db="pubmed", id=idlist, rettype="medline", retmode="text")
records = Medline.parse(handle)

# Save the data to disk as a CSV table
with open('medulloblastoma.csv', 'w') as csvfile:
    fieldnames = ['PMID', 'TI', 'AU']
    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
    writer.writeheader()
    for record in records:
        writer.writerow({'PMID': record.get('PMID', ''), 'TI': record.get('TI', ''), 'AU': ', '.join(record.get('AU', ''))})


import sqlite3
import csv

# 创建一个连接到数据库的连接对象
connection = sqlite3.connect('first.db')

# 创建一个游标对象
cursor = connection.cursor()

# 定义一个SQL语句，用于在数据库中创建一个名为"paper"的表
create_table = '''CREATE TABLE paper(PMID, Title, Abstract, Author)'''

# 执行SQL语句，创建"paper"表
cursor.execute(create_table)

# 打开CSV文件并读取内容
with open('medulloblastoma_abstracts.csv', encoding="utf-8") as file:
    contents = csv.reader(file)

    # 定义一个SQL语句，用于向"paper"表中插入记录
    insert_records = "INSERT INTO paper (PMID, Title, Abstract, Author) VALUES (?, ?, ?, ?)"

    # 执行SQL语句，插入记录
    cursor.executemany(insert_records, contents)

# 提交更改并关闭连接
connection.commit()
connection.close()
